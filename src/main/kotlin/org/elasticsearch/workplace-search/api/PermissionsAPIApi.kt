/**
 * Workplace Search API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.elasticsearch.workplace-search.api

-search.model.ErrorsResponse
-search.model.ListPermissionsResponse
-search.model.Permission
-search.model.PermissionsUser

import io.swagger.client.infrastructure.*

class PermissionsAPIApi(basePath: kotlin.String = "{schemes}://{host}:{port}") : ApiClient(basePath) {

    /**
     * Adds one or more new permissions atop existing permissions
     * Add one or more permission for a given user. Permissions are added atop the existing
     * @param body  
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param user The username in context 
     * @return PermissionsUser
     */
    @Suppress("UNCHECKED_CAST")
    fun addUserPermissions(body: kotlin.Array<Permission>, contentSourceId: kotlin.String, user: kotlin.String): PermissionsUser {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/ws/v1/sources/{content_source_id}/permissions/{user}/add".replace("{" + "content_source_id" + "}", "$contentSourceId").replace("{" + "user" + "}", "$user")
        )
        val response = request<PermissionsUser>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PermissionsUser
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Lists all permissions for one user
     * List permissions for a user
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param user The username in context 
     * @return PermissionsUser
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserPermissions(contentSourceId: kotlin.String, user: kotlin.String): PermissionsUser {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/ws/v1/sources/{content_source_id}/permissions/{user}".replace("{" + "content_source_id" + "}", "$contentSourceId").replace("{" + "user" + "}", "$user")
        )
        val response = request<PermissionsUser>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PermissionsUser
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Lists all permissions for all users
     * List all permissions for all users
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param currentPage Which page of results to request (optional)
     * @param pageSize The number of results to return in a page (optional)
     * @return ListPermissionsResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun listPermissions(contentSourceId: kotlin.String, currentPage: kotlin.Int? = null, pageSize: kotlin.Int? = null): ListPermissionsResponse {
        val localVariableQuery: MultiValueMap = mapOf("current_page" to listOf("$currentPage"), "page_size" to listOf("$pageSize"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/ws/v1/sources/{content_source_id}/permissions".replace("{" + "content_source_id" + "}", "$contentSourceId"), query = localVariableQuery
        )
        val response = request<ListPermissionsResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ListPermissionsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Creates a new set of permissions or over-writes all existing permissions
     * Create a set of permissions or overwrite existing permissions
     * @param body  
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param user The username in context 
     * @return PermissionsUser
     */
    @Suppress("UNCHECKED_CAST")
    fun putUserPermissions(body: kotlin.Array<Permission>, contentSourceId: kotlin.String, user: kotlin.String): PermissionsUser {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/ws/v1/sources/{content_source_id}/permissions/{user}".replace("{" + "content_source_id" + "}", "$contentSourceId").replace("{" + "user" + "}", "$user")
        )
        val response = request<PermissionsUser>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PermissionsUser
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Removes one or more permissions from an existing set of permissions
     * Remove one or more permission for a given user
     * @param body  
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param user The username in context 
     * @return PermissionsUser
     */
    @Suppress("UNCHECKED_CAST")
    fun removeUserPermissions(body: kotlin.Array<Permission>, contentSourceId: kotlin.String, user: kotlin.String): PermissionsUser {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/ws/v1/sources/{content_source_id}/permissions/{user}/remove".replace("{" + "content_source_id" + "}", "$contentSourceId").replace("{" + "user" + "}", "$user")
        )
        val response = request<PermissionsUser>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PermissionsUser
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
