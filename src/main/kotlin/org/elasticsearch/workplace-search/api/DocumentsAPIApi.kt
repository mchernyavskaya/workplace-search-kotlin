/**
 * Workplace Search API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.elasticsearch.workplace-search.api

-search.model.DeleteDocumentsByQueryResponse
-search.model.Document
-search.model.DocumentBulkCreateResponse
-search.model.DocumentBulkDeleteResponse
-search.model.DocumentsDeleteDefinition
-search.model.ErrorsResponse
-search.model.ExternalId
-search.model.SingleDocumentResponse

import io.swagger.client.infrastructure.*

class DocumentsAPIApi(basePath: kotlin.String = "{schemes}://{host}:{port}") : ApiClient(basePath) {

    /**
     * Deletes a list of documents from a custom content source
     * Remove documents from a Custom API Source
     * @param body  
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @return DocumentBulkDeleteResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteDocuments(body: kotlin.Array<ExternalId>, contentSourceId: kotlin.String): DocumentBulkDeleteResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/ws/v1/sources/{content_source_id}/documents/bulk_destroy".replace("{" + "content_source_id" + "}", "$contentSourceId")
        )
        val response = request<DocumentBulkDeleteResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentBulkDeleteResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes documents by query in a custom content source
     * Deletes documents by query in a custom content source
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param body  (optional)
     * @return DeleteDocumentsByQueryResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteDocumentsByQuery(contentSourceId: kotlin.String, body: DocumentsDeleteDefinition? = null): DeleteDocumentsByQueryResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/ws/v1/sources/{content_source_id}/documents".replace("{" + "content_source_id" + "}", "$contentSourceId")
        )
        val response = request<DeleteDocumentsByQueryResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeleteDocumentsByQueryResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieves a document by ID from the specified content source
     * Retrieves a document by ID from the specified content source
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param externalId Unique ID for a content source document. Provided upon or returned at creation. 
     * @return SingleDocumentResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getDocument(contentSourceId: kotlin.String, externalId: kotlin.String): SingleDocumentResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/ws/v1/sources/{content_source_id}/documents/{document_id}".replace("{" + "content_source_id" + "}", "$contentSourceId").replace("{" + "external_id" + "}", "$externalId")
        )
        val response = request<SingleDocumentResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SingleDocumentResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Indexes one or more new documents into a custom content source, or updates one or more existing documents
     * Indexes one or more new documents into a custom content source, or updates one or more existing documents
     * @param body  
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @return DocumentBulkCreateResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun indexDocuments(body: kotlin.Array<Document>, contentSourceId: kotlin.String): DocumentBulkCreateResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/ws/v1/sources/{content_source_id}/documents/bulk_create".replace("{" + "content_source_id" + "}", "$contentSourceId")
        )
        val response = request<DocumentBulkCreateResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentBulkCreateResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
