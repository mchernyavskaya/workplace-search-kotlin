/**
 * Workplace Search API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.elasticsearch.workplace-search.api

-search.model.ErrorsResponse
-search.model.SyncJobsCommand
-search.model.SyncJobsCommandResponse

import io.swagger.client.infrastructure.*

class SyncJobsAPIApi(basePath: kotlin.String = "{schemes}://{host}:{port}") : ApiClient(basePath) {

    /**
     * Issue commands to a Content Source&#x27;s sync jobs
     * Control a content source&#x27;s sync jobs
     * @param body  
     * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
     * @param jobType The type of sync job to consider (optional)
     * @return SyncJobsCommandResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun commandSyncJobs(body: SyncJobsCommand, contentSourceId: kotlin.String, jobType: kotlin.Array<kotlin.String>? = null): SyncJobsCommandResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("job_type" to toMultiValue(jobType!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/ws/v1/sources/{content_source_id}/sync/jobs".replace("{" + "content_source_id" + "}", "$contentSourceId"), query = localVariableQuery
        )
        val response = request<SyncJobsCommandResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SyncJobsCommandResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
