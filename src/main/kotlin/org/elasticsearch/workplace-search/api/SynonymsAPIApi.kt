/**
 * Workplace Search API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.elasticsearch.workplace-search.api

-search.model.BatchSynonymSetsResponse
-search.model.ErrorsResponse
-search.model.ListSynonymSetResponse
-search.model.RecordDeletedResponse
-search.model.SingleSynonymSetResponse
-search.model.SynonymsCreateDefinition
-search.model.SynonymsListDefinition
-search.model.SynonymsUpdateDefinition

import io.swagger.client.infrastructure.*

class SynonymsAPIApi(basePath: kotlin.String = "{schemes}://{host}:{port}") : ApiClient(basePath) {

    /**
     * Create a batch of synonym sets
     * Create batched synonym sets
     * @param body  
     * @return BatchSynonymSetsResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun createBatchSynonymSets(body: SynonymsCreateDefinition): BatchSynonymSetsResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/ws/v1/synonyms"
        )
        val response = request<BatchSynonymSetsResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as BatchSynonymSetsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete a synonym set
     * Delete a synonym set
     * @param externalId Unique ID for a content source document. Provided upon or returned at creation. 
     * @return RecordDeletedResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteSynonymSet(externalId: kotlin.String): RecordDeletedResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/ws/v1/synonyms/{synonym_set_id}".replace("{" + "external_id" + "}", "$externalId")
        )
        val response = request<RecordDeletedResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RecordDeletedResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieve a synonym set by ID
     * Retrieve a synonym set by ID
     * @param externalId Unique ID for a content source document. Provided upon or returned at creation. 
     * @return SingleSynonymSetResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getSynonymSet(externalId: kotlin.String): SingleSynonymSetResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/ws/v1/synonyms/{synonym_set_id}".replace("{" + "external_id" + "}", "$externalId")
        )
        val response = request<SingleSynonymSetResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SingleSynonymSetResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Retrieves all synonym sets
     * Retrieve a list of synonym sets
     * @param body  (optional)
     * @return ListSynonymSetResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun listSynonymSets(body: SynonymsListDefinition? = null): ListSynonymSetResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/ws/v1/synonyms"
        )
        val response = request<ListSynonymSetResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ListSynonymSetResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update a synonym set
     * Update a synonym set
     * @param body  
     * @param externalId Unique ID for a content source document. Provided upon or returned at creation. 
     * @return SingleSynonymSetResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun putSynonymSet(body: SynonymsUpdateDefinition, externalId: kotlin.String): SingleSynonymSetResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/ws/v1/synonyms/{synonym_set_id}".replace("{" + "external_id" + "}", "$externalId")
        )
        val response = request<SingleSynonymSetResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SingleSynonymSetResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
