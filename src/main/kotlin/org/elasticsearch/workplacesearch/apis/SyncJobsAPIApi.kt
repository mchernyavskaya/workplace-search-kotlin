/**
 * Workplace Search API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.elasticsearch.workplacesearch.apis

import org.elasticsearch.workplacesearch.models.ErrorsResponse
import org.elasticsearch.workplacesearch.models.SyncJobsCommand
import org.elasticsearch.workplacesearch.models.SyncJobsCommandResponse

import org.elasticsearch.workplacesearch.infrastructure.ApiClient
import org.elasticsearch.workplacesearch.infrastructure.ClientException
import org.elasticsearch.workplacesearch.infrastructure.ClientError
import org.elasticsearch.workplacesearch.infrastructure.ServerException
import org.elasticsearch.workplacesearch.infrastructure.ServerError
import org.elasticsearch.workplacesearch.infrastructure.MultiValueMap
import org.elasticsearch.workplacesearch.infrastructure.RequestConfig
import org.elasticsearch.workplacesearch.infrastructure.RequestMethod
import org.elasticsearch.workplacesearch.infrastructure.ResponseType
import org.elasticsearch.workplacesearch.infrastructure.Success
import org.elasticsearch.workplacesearch.infrastructure.toMultiValue

class SyncJobsAPIApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.elasticsearch.workplacesearch.baseUrl", "http://localhost:3002")
        }
    }

    /**
    * Issue commands to a Content Source&#39;s sync jobs
    * Control a content source&#39;s sync jobs
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param syncJobsCommand  
    * @param jobType The type of sync job to consider (optional)
    * @return SyncJobsCommandResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun commandSyncJobs(contentSourceId: kotlin.String, syncJobsCommand: SyncJobsCommand, jobType: kotlin.collections.List<kotlin.String>?) : SyncJobsCommandResponse {
        val localVariableConfig = commandSyncJobsRequestConfig(contentSourceId = contentSourceId, syncJobsCommand = syncJobsCommand, jobType = jobType)

        val localVarResponse = request<SyncJobsCommand, SyncJobsCommandResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SyncJobsCommandResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation commandSyncJobs
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param syncJobsCommand  
    * @param jobType The type of sync job to consider (optional)
    * @return RequestConfig
    */
    fun commandSyncJobsRequestConfig(contentSourceId: kotlin.String, syncJobsCommand: SyncJobsCommand, jobType: kotlin.collections.List<kotlin.String>?) : RequestConfig<SyncJobsCommand> {
        val localVariableBody = syncJobsCommand
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (jobType != null) {
                    put("job_type", toMultiValue(jobType.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/ws/v1/sources/{content_source_id}/sync/jobs".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
