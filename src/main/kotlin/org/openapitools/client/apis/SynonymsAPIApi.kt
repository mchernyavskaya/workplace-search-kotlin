/**
 * Workplace Search API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BatchSynonymSetsResponse
import org.openapitools.client.models.ErrorsResponse
import org.openapitools.client.models.ListSynonymSetResponse
import org.openapitools.client.models.RecordDeletedResponse
import org.openapitools.client.models.SingleSynonymSetResponse
import org.openapitools.client.models.SynonymsCreateDefinition
import org.openapitools.client.models.SynonymsListDefinition
import org.openapitools.client.models.SynonymsUpdateDefinition

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SynonymsAPIApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost:3002")
        }
    }

    /**
    * Create a batch of synonym sets
    * Create batched synonym sets
    * @param synonymsCreateDefinition  
    * @return BatchSynonymSetsResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createBatchSynonymSets(synonymsCreateDefinition: SynonymsCreateDefinition) : BatchSynonymSetsResponse {
        val localVariableConfig = createBatchSynonymSetsRequestConfig(synonymsCreateDefinition = synonymsCreateDefinition)

        val localVarResponse = request<SynonymsCreateDefinition, BatchSynonymSetsResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatchSynonymSetsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createBatchSynonymSets
    *
    * @param synonymsCreateDefinition  
    * @return RequestConfig
    */
    fun createBatchSynonymSetsRequestConfig(synonymsCreateDefinition: SynonymsCreateDefinition) : RequestConfig<SynonymsCreateDefinition> {
        val localVariableBody = synonymsCreateDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/ws/v1/synonyms",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a synonym set
    * Delete a synonym set
    * @param synonymSetId Unique ID for a synonym set. Provided upon or returned at creation. 
    * @return RecordDeletedResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteSynonymSet(synonymSetId: kotlin.String) : RecordDeletedResponse {
        val localVariableConfig = deleteSynonymSetRequestConfig(synonymSetId = synonymSetId)

        val localVarResponse = request<Unit, RecordDeletedResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RecordDeletedResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteSynonymSet
    *
    * @param synonymSetId Unique ID for a synonym set. Provided upon or returned at creation. 
    * @return RequestConfig
    */
    fun deleteSynonymSetRequestConfig(synonymSetId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/ws/v1/synonyms/{synonym_set_id}".replace("{"+"synonym_set_id"+"}", "$synonymSetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieve a synonym set by ID
    * Retrieve a synonym set by ID
    * @param synonymSetId Unique ID for a synonym set. Provided upon or returned at creation. 
    * @return SingleSynonymSetResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSynonymSet(synonymSetId: kotlin.String) : SingleSynonymSetResponse {
        val localVariableConfig = getSynonymSetRequestConfig(synonymSetId = synonymSetId)

        val localVarResponse = request<Unit, SingleSynonymSetResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleSynonymSetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getSynonymSet
    *
    * @param synonymSetId Unique ID for a synonym set. Provided upon or returned at creation. 
    * @return RequestConfig
    */
    fun getSynonymSetRequestConfig(synonymSetId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/synonyms/{synonym_set_id}".replace("{"+"synonym_set_id"+"}", "$synonymSetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves all synonym sets
    * Retrieve a list of synonym sets
    * @param synonymsListDefinition  (optional)
    * @return ListSynonymSetResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listSynonymSets(synonymsListDefinition: SynonymsListDefinition?) : ListSynonymSetResponse {
        val localVariableConfig = listSynonymSetsRequestConfig(synonymsListDefinition = synonymsListDefinition)

        val localVarResponse = request<SynonymsListDefinition, ListSynonymSetResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListSynonymSetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation listSynonymSets
    *
    * @param synonymsListDefinition  (optional)
    * @return RequestConfig
    */
    fun listSynonymSetsRequestConfig(synonymsListDefinition: SynonymsListDefinition?) : RequestConfig<SynonymsListDefinition> {
        val localVariableBody = synonymsListDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/synonyms",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update a synonym set
    * Update a synonym set
    * @param synonymSetId Unique ID for a synonym set. Provided upon or returned at creation. 
    * @param synonymsUpdateDefinition  
    * @return SingleSynonymSetResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putSynonymSet(synonymSetId: kotlin.String, synonymsUpdateDefinition: SynonymsUpdateDefinition) : SingleSynonymSetResponse {
        val localVariableConfig = putSynonymSetRequestConfig(synonymSetId = synonymSetId, synonymsUpdateDefinition = synonymsUpdateDefinition)

        val localVarResponse = request<SynonymsUpdateDefinition, SingleSynonymSetResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleSynonymSetResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation putSynonymSet
    *
    * @param synonymSetId Unique ID for a synonym set. Provided upon or returned at creation. 
    * @param synonymsUpdateDefinition  
    * @return RequestConfig
    */
    fun putSynonymSetRequestConfig(synonymSetId: kotlin.String, synonymsUpdateDefinition: SynonymsUpdateDefinition) : RequestConfig<SynonymsUpdateDefinition> {
        val localVariableBody = synonymsUpdateDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/ws/v1/synonyms/{synonym_set_id}".replace("{"+"synonym_set_id"+"}", "$synonymSetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
