/**
 * Workplace Search API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.AutomaticQueryRefinementDetailsResponse
import org.openapitools.client.models.ContentSource
import org.openapitools.client.models.ContentSourceCreateDefinition
import org.openapitools.client.models.ContentSourceIconDefinition
import org.openapitools.client.models.ContentSourceUpdateDefinition
import org.openapitools.client.models.ErrorsResponse
import org.openapitools.client.models.ListContentSourcesResponse
import org.openapitools.client.models.OneOfLessThanErrorsResponseCommaContentSourcePartialCreateResponseGreaterThan
import org.openapitools.client.models.OneOfLessThanErrorsResponseCommaContentSourcePartialUpdateResponseGreaterThan
import org.openapitools.client.models.RecordDeletedResponse
import org.openapitools.client.models.UploadIconsResponse

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ContentSourcesAPIApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost:3002")
        }
    }

    /**
    * Create a content source
    * Create a custom content source
    * @param contentSourceCreateDefinition  
    * @return ContentSource
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createContentSource(contentSourceCreateDefinition: ContentSourceCreateDefinition) : ContentSource {
        val localVariableConfig = createContentSourceRequestConfig(contentSourceCreateDefinition = contentSourceCreateDefinition)

        val localVarResponse = request<ContentSourceCreateDefinition, ContentSource>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContentSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createContentSource
    *
    * @param contentSourceCreateDefinition  
    * @return RequestConfig
    */
    fun createContentSourceRequestConfig(contentSourceCreateDefinition: ContentSourceCreateDefinition) : RequestConfig<ContentSourceCreateDefinition> {
        val localVariableBody = contentSourceCreateDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/ws/v1/sources",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes a content source by ID
    * Deletes a content source by ID
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @return RecordDeletedResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteContentSource(contentSourceId: kotlin.String) : RecordDeletedResponse {
        val localVariableConfig = deleteContentSourceRequestConfig(contentSourceId = contentSourceId)

        val localVarResponse = request<Unit, RecordDeletedResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RecordDeletedResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteContentSource
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @return RequestConfig
    */
    fun deleteContentSourceRequestConfig(contentSourceId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/ws/v1/sources/{content_source_id}".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves a content source&#39;s automatic query refinement details
    * Retrieves a content source&#39;s automatic query refinement details
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @return AutomaticQueryRefinementDetailsResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAutoQueryRefinementDetails(contentSourceId: kotlin.String) : AutomaticQueryRefinementDetailsResponse {
        val localVariableConfig = getAutoQueryRefinementDetailsRequestConfig(contentSourceId = contentSourceId)

        val localVarResponse = request<Unit, AutomaticQueryRefinementDetailsResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AutomaticQueryRefinementDetailsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getAutoQueryRefinementDetails
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @return RequestConfig
    */
    fun getAutoQueryRefinementDetailsRequestConfig(contentSourceId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources/{content_source_id}/automatic_query_refinement".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves a content source by ID
    * Retrieves a content source by ID
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @return ContentSource
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getContentSource(contentSourceId: kotlin.String) : ContentSource {
        val localVariableConfig = getContentSourceRequestConfig(contentSourceId = contentSourceId)

        val localVarResponse = request<Unit, ContentSource>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContentSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getContentSource
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @return RequestConfig
    */
    fun getContentSourceRequestConfig(contentSourceId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources/{content_source_id}".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves all content sources
    * Retrieves all content sources
    * @param currentPage Which page of results to request (optional)
    * @param pageSize The number of results to return in a page (optional)
    * @return ListContentSourcesResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listContentSources(currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ListContentSourcesResponse {
        val localVariableConfig = listContentSourcesRequestConfig(currentPage = currentPage, pageSize = pageSize)

        val localVarResponse = request<Unit, ListContentSourcesResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListContentSourcesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation listContentSources
    *
    * @param currentPage Which page of results to request (optional)
    * @param pageSize The number of results to return in a page (optional)
    * @return RequestConfig
    */
    fun listContentSourcesRequestConfig(currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (currentPage != null) {
                    put("current_page", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update a content source
    * Update a content source
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param contentSourceUpdateDefinition  
    * @return ContentSource
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putContentSource(contentSourceId: kotlin.String, contentSourceUpdateDefinition: ContentSourceUpdateDefinition) : ContentSource {
        val localVariableConfig = putContentSourceRequestConfig(contentSourceId = contentSourceId, contentSourceUpdateDefinition = contentSourceUpdateDefinition)

        val localVarResponse = request<ContentSourceUpdateDefinition, ContentSource>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ContentSource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation putContentSource
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param contentSourceUpdateDefinition  
    * @return RequestConfig
    */
    fun putContentSourceRequestConfig(contentSourceId: kotlin.String, contentSourceUpdateDefinition: ContentSourceUpdateDefinition) : RequestConfig<ContentSourceUpdateDefinition> {
        val localVariableBody = contentSourceUpdateDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/ws/v1/sources/{content_source_id}".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Upload content source icons
    * Upload content source icons
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param contentSourceIconDefinition  
    * @return UploadIconsResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putContentSourceIcons(contentSourceId: kotlin.String, contentSourceIconDefinition: ContentSourceIconDefinition) : UploadIconsResponse {
        val localVariableConfig = putContentSourceIconsRequestConfig(contentSourceId = contentSourceId, contentSourceIconDefinition = contentSourceIconDefinition)

        val localVarResponse = request<ContentSourceIconDefinition, UploadIconsResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UploadIconsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation putContentSourceIcons
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param contentSourceIconDefinition  
    * @return RequestConfig
    */
    fun putContentSourceIconsRequestConfig(contentSourceId: kotlin.String, contentSourceIconDefinition: ContentSourceIconDefinition) : RequestConfig<ContentSourceIconDefinition> {
        val localVariableBody = contentSourceIconDefinition
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/ws/v1/sources/{content_source_id}/icon".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
