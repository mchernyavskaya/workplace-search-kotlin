/**
 * Workplace Search API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.ErrorsResponse
import org.openapitools.client.models.ListPermissionsResponse
import org.openapitools.client.models.PermissionsUser

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PermissionsAPIApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost:3002")
        }
    }

    /**
    * Adds one or more new permissions atop existing permissions
    * Add one or more permission for a given user. Permissions are added atop the existing
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param requestBody  
    * @return PermissionsUser
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addUserPermissions(contentSourceId: kotlin.String, user: kotlin.String, requestBody: kotlin.collections.List<kotlin.String>) : PermissionsUser {
        val localVariableConfig = addUserPermissionsRequestConfig(contentSourceId = contentSourceId, user = user, requestBody = requestBody)

        val localVarResponse = request<kotlin.collections.List<kotlin.String>, PermissionsUser>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsUser
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation addUserPermissions
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param requestBody  
    * @return RequestConfig
    */
    fun addUserPermissionsRequestConfig(contentSourceId: kotlin.String, user: kotlin.String, requestBody: kotlin.collections.List<kotlin.String>) : RequestConfig<kotlin.collections.List<kotlin.String>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/ws/v1/sources/{content_source_id}/permissions/{user}/add".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Lists all permissions for one user
    * List permissions for a user
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @return PermissionsUser
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserPermissions(contentSourceId: kotlin.String, user: kotlin.String) : PermissionsUser {
        val localVariableConfig = getUserPermissionsRequestConfig(contentSourceId = contentSourceId, user = user)

        val localVarResponse = request<Unit, PermissionsUser>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsUser
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getUserPermissions
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @return RequestConfig
    */
    fun getUserPermissionsRequestConfig(contentSourceId: kotlin.String, user: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources/{content_source_id}/permissions/{user}".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Lists all permissions for all users
    * List all permissions for all users
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param currentPage Which page of results to request (optional)
    * @param pageSize The number of results to return in a page (optional)
    * @return ListPermissionsResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listPermissions(contentSourceId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ListPermissionsResponse {
        val localVariableConfig = listPermissionsRequestConfig(contentSourceId = contentSourceId, currentPage = currentPage, pageSize = pageSize)

        val localVarResponse = request<Unit, ListPermissionsResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListPermissionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation listPermissions
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param currentPage Which page of results to request (optional)
    * @param pageSize The number of results to return in a page (optional)
    * @return RequestConfig
    */
    fun listPermissionsRequestConfig(contentSourceId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (currentPage != null) {
                    put("current_page", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources/{content_source_id}/permissions".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a new set of permissions or over-writes all existing permissions
    * Create a set of permissions or overwrite existing permissions
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param requestBody  
    * @return PermissionsUser
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putUserPermissions(contentSourceId: kotlin.String, user: kotlin.String, requestBody: kotlin.collections.List<kotlin.String>) : PermissionsUser {
        val localVariableConfig = putUserPermissionsRequestConfig(contentSourceId = contentSourceId, user = user, requestBody = requestBody)

        val localVarResponse = request<kotlin.collections.List<kotlin.String>, PermissionsUser>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsUser
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation putUserPermissions
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param requestBody  
    * @return RequestConfig
    */
    fun putUserPermissionsRequestConfig(contentSourceId: kotlin.String, user: kotlin.String, requestBody: kotlin.collections.List<kotlin.String>) : RequestConfig<kotlin.collections.List<kotlin.String>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/ws/v1/sources/{content_source_id}/permissions/{user}".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Removes one or more permissions from an existing set of permissions
    * Remove one or more permission for a given user
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param requestBody  
    * @return PermissionsUser
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeUserPermissions(contentSourceId: kotlin.String, user: kotlin.String, requestBody: kotlin.collections.List<kotlin.String>) : PermissionsUser {
        val localVariableConfig = removeUserPermissionsRequestConfig(contentSourceId = contentSourceId, user = user, requestBody = requestBody)

        val localVarResponse = request<kotlin.collections.List<kotlin.String>, PermissionsUser>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PermissionsUser
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation removeUserPermissions
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param requestBody  
    * @return RequestConfig
    */
    fun removeUserPermissionsRequestConfig(contentSourceId: kotlin.String, user: kotlin.String, requestBody: kotlin.collections.List<kotlin.String>) : RequestConfig<kotlin.collections.List<kotlin.String>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/ws/v1/sources/{content_source_id}/permissions/{user}/remove".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
