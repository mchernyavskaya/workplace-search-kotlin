/**
 * Workplace Search API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.DeleteExternalIdentitiesResponse
import org.openapitools.client.models.ExternalIdentity
import org.openapitools.client.models.ListExternalIdentitiesResponse

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class ExternalIdentitiesAPIApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost:3002")
        }
    }

    /**
    * Adds a new external identity
    * Adds a new external identity
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param externalIdentity  
    * @return ExternalIdentity
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createExternalIdentity(contentSourceId: kotlin.String, externalIdentity: ExternalIdentity) : ExternalIdentity {
        val localVariableConfig = createExternalIdentityRequestConfig(contentSourceId = contentSourceId, externalIdentity = externalIdentity)

        val localVarResponse = request<ExternalIdentity, ExternalIdentity>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExternalIdentity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation createExternalIdentity
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param externalIdentity  
    * @return RequestConfig
    */
    fun createExternalIdentityRequestConfig(contentSourceId: kotlin.String, externalIdentity: ExternalIdentity) : RequestConfig<ExternalIdentity> {
        val localVariableBody = externalIdentity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/ws/v1/sources/{content_source_id}/external_identities".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes an external identity
    * Deletes an external identity
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @return DeleteExternalIdentitiesResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteExternalIdentity(contentSourceId: kotlin.String, user: kotlin.String) : DeleteExternalIdentitiesResponse {
        val localVariableConfig = deleteExternalIdentityRequestConfig(contentSourceId = contentSourceId, user = user)

        val localVarResponse = request<Unit, DeleteExternalIdentitiesResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteExternalIdentitiesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation deleteExternalIdentity
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @return RequestConfig
    */
    fun deleteExternalIdentityRequestConfig(contentSourceId: kotlin.String, user: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/ws/v1/sources/{content_source_id}/external_identities/{user}".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves an external identity
    * Retrieves an external identity
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @return ExternalIdentity
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getExternalIdentity(contentSourceId: kotlin.String, user: kotlin.String) : ExternalIdentity {
        val localVariableConfig = getExternalIdentityRequestConfig(contentSourceId = contentSourceId, user = user)

        val localVarResponse = request<Unit, ExternalIdentity>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExternalIdentity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation getExternalIdentity
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @return RequestConfig
    */
    fun getExternalIdentityRequestConfig(contentSourceId: kotlin.String, user: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources/{content_source_id}/external_identities/{user}".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves all external identities
    * Retrieves all external identities
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param currentPage Which page of results to request (optional)
    * @param pageSize The number of results to return in a page (optional)
    * @return ListExternalIdentitiesResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listExternalIdentities(contentSourceId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ListExternalIdentitiesResponse {
        val localVariableConfig = listExternalIdentitiesRequestConfig(contentSourceId = contentSourceId, currentPage = currentPage, pageSize = pageSize)

        val localVarResponse = request<Unit, ListExternalIdentitiesResponse>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListExternalIdentitiesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation listExternalIdentities
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param currentPage Which page of results to request (optional)
    * @param pageSize The number of results to return in a page (optional)
    * @return RequestConfig
    */
    fun listExternalIdentitiesRequestConfig(contentSourceId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (currentPage != null) {
                    put("current_page", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/ws/v1/sources/{content_source_id}/external_identities".replace("{"+"content_source_id"+"}", "$contentSourceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Updates an external identity
    * Updates an external identity
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param externalIdentity  
    * @return ExternalIdentity
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putExternalIdentity(contentSourceId: kotlin.String, user: kotlin.String, externalIdentity: ExternalIdentity) : ExternalIdentity {
        val localVariableConfig = putExternalIdentityRequestConfig(contentSourceId = contentSourceId, user = user, externalIdentity = externalIdentity)

        val localVarResponse = request<ExternalIdentity, ExternalIdentity>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExternalIdentity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation putExternalIdentity
    *
    * @param contentSourceId Unique ID for a Custom API source, provided upon creation of a Custom API Source 
    * @param user The username in context 
    * @param externalIdentity  
    * @return RequestConfig
    */
    fun putExternalIdentityRequestConfig(contentSourceId: kotlin.String, user: kotlin.String, externalIdentity: ExternalIdentity) : RequestConfig<ExternalIdentity> {
        val localVariableBody = externalIdentity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/ws/v1/sources/{content_source_id}/external_identities/{user}".replace("{"+"content_source_id"+"}", "$contentSourceId").replace("{"+"user"+"}", "$user"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
